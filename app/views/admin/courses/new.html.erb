<div class="container-fluid py-4">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h1>📚 신규 콘텐츠 등록</h1>
    <%= link_to "← 목록", admin_courses_path, class: "btn btn-outline-secondary" %>
  </div>

  <%= form_with model: [:admin, @course], html: { multipart: true, class: 'content-upload-form' } do |f| %>
    <!-- 1️⃣ 콘텐츠 유형 선택 -->
    <div class="card mb-4">
      <div class="card-header bg-primary text-white">
        <h5 class="mb-0" id="content-type-heading">1️⃣ 콘텐츠 유형 선택</h5>
      </div>
      <div class="card-body">
        <div class="row g-3" role="group" aria-labelledby="content-type-heading">
          <div class="col-md-4">
            <div class="content-type-card" data-type="ebook">
              <input type="radio" name="content_type_selection" value="ebook" id="type_ebook" checked>
              <label for="type_ebook" class="content-type-label">
                <div class="icon">📚</div>
                <h5>전자동화책</h5>
                <p class="text-muted">이미지 + 텍스트로 구성된 전자책</p>
              </label>
            </div>
          </div>
          <div class="col-md-4">
            <div class="content-type-card" data-type="video">
              <input type="radio" name="content_type_selection" value="video" id="type_video">
              <label for="type_video" class="content-type-label">
                <div class="icon">🎬</div>
                <h5>구연동화</h5>
                <p class="text-muted">비디오 + 자막으로 구성된 영상</p>
              </label>
            </div>
          </div>
          <div class="col-md-4">
            <div class="content-type-card" data-type="education">
              <input type="radio" name="content_type_selection" value="education" id="type_education">
              <label for="type_education" class="content-type-label">
                <div class="icon">📖</div>
                <h5>교육 자료</h5>
                <p class="text-muted">학습용 교육 콘텐츠</p>
              </label>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- 2️⃣ 기본 정보 -->
    <div class="card mb-4">
      <div class="card-header bg-info text-white">
        <h5 class="mb-0" id="basic-info-heading">2️⃣ 기본 정보</h5>
      </div>
      <div class="card-body">
        <div class="row g-3" role="group" aria-labelledby="basic-info-heading">
          <!-- 제목 & 부제목 -->
          <div class="col-md-8">
            <%= f.label :title, '제목 *', class: 'form-label' %>
            <%= f.text_field :title, class: 'form-control', placeholder: '예: 백설공주', required: true %>
          </div>
          <div class="col-md-4">
            <%= f.label :subtitle, '부제목', class: 'form-label' %>
            <%= f.text_field :subtitle, class: 'form-control', placeholder: '예: 착한 마음씨' %>
          </div>

          <!-- 시리즈 정보 -->
          <div class="col-md-8">
            <%= f.label :series_name, '시리즈', class: 'form-label' %>
            <%= f.text_field :series_name, class: 'form-control', placeholder: '예: 명작동화 시리즈', list: 'series-list' %>
            <datalist id="series-list">
              <% Course.distinct.pluck(:series_name).compact.each do |series| %>
                <option value="<%= series %>">
              <% end %>
            </datalist>
          </div>
          <div class="col-md-4">
            <%= f.label :series_order, '시리즈 순서', class: 'form-label' %>
            <%= f.number_field :series_order, class: 'form-control', placeholder: '1', min: 1 %>
          </div>

          <!-- 카테고리 & 연령 -->
          <div class="col-md-4">
            <%= f.label :category, '카테고리 *', class: 'form-label' %>
            <%= f.select :category, 
              options_for_select([
                ['전래동화', '전래동화'],
                ['명작동화', '명작동화'],
                ['창작동화', '창작동화'],
                ['전자동화책', '전자동화책'],
                ['구연동화', '구연동화'],
                ['교육자료', '교육자료']
              ]), 
              { prompt: '선택하세요' }, 
              class: 'form-select', 
              required: true 
            %>
          </div>
          <div class="col-md-4">
            <%= f.label :age, '연령 *', class: 'form-label' %>
            <%= f.select :age,
              options_for_select([
                ['아기 (0-2세)', 'baby'],
                ['유아 (3-5세)', 'toddler'],
                ['초등 (6-13세)', 'elementary'],
                ['청소년 (14-16세)', 'teen']
              ]),
              { prompt: '선택하세요' },
              class: 'form-select',
              required: true
            %>
          </div>
          <div class="col-md-4">
            <%= f.label :difficulty, '난이도 (별점)', class: 'form-label' %>
            <div class="difficulty-selector">
              <% (1..5).each do |level| %>
                <input type="radio" name="course[difficulty]" value="<%= level %>" id="difficulty_<%= level %>" <%= 'checked' if level == 3 %>>
                <label for="difficulty_<%= level %>">⭐</label>
              <% end %>
            </div>
            <small class="form-text text-muted">별 1개(쉬움) ~ 5개(어려움)</small>
          </div>

          <!-- 가격 & 할인 -->
          <div class="col-md-4">
            <%= f.label :price, '가격 (원) *', class: 'form-label' %>
            <%= f.number_field :price, class: 'form-control', placeholder: '9900', step: '100', required: true %>
          </div>
          <div class="col-md-4">
            <%= f.label :discount_percentage, '할인율 (%)', class: 'form-label' %>
            <%= f.number_field :discount_percentage, class: 'form-control', placeholder: '0', min: 0, max: 100 %>
          </div>
          <div class="col-md-4">
            <%= f.label :level, '학습 단계 *', class: 'form-label' %>
            <%= f.select :level,
              options_for_select([
                ['초급', 'beginner'],
                ['중급', 'intermediate'],
                ['고급', 'advanced']
              ]),
              { prompt: '선택하세요' },
              class: 'form-select',
              required: true
            %>
          </div>

          <!-- 소요시간 -->
          <div class="col-md-4">
            <%= f.label :duration, '소요시간 (분) *', class: 'form-label' %>
            <%= f.number_field :duration, class: 'form-control', placeholder: '15', required: true %>
          </div>

          <!-- 태그 -->
          <div class="col-md-8">
            <%= f.label :tags, '태그', class: 'form-label' %>
            <%= f.text_field :tags, class: 'form-control', placeholder: '#동물, #우정, #교훈' %>
            <small class="form-text text-muted">쉼표로 구분하세요</small>
          </div>

          <!-- 설명 -->
          <div class="col-12">
            <%= f.label :description, '설명 *', class: 'form-label' %>
            <%= f.text_area :description, rows: 4, class: 'form-control', placeholder: '콘텐츠 설명을 입력하세요...', required: true %>
          </div>
        </div>
      </div>
    </div>

    <!-- 3️⃣ 제작진 정보 -->
    <div class="card mb-4">
      <div class="card-header bg-success text-white">
        <h5 class="mb-0" id="author-info-heading">3️⃣ 제작진 정보</h5>
      </div>
      <div class="card-body">
        <div class="row g-3" role="group" aria-labelledby="author-info-heading">
          <div class="col-md-4">
            <label class="form-label">작가</label>
            <div class="input-group">
              <%= select_tag 'course[writer_id]', 
                options_from_collection_for_select(@authors.writers, :id, :name),
                { include_blank: '선택하세요', class: 'form-select' }
              %>
              <button type="button" class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#newAuthorModal" data-role="writer">
                <i class="bi bi-plus"></i>
              </button>
            </div>
          </div>
          <div class="col-md-4">
            <label class="form-label">일러스트레이터</label>
            <div class="input-group">
              <%= select_tag 'course[illustrator_id]',
                options_from_collection_for_select(@authors.illustrators, :id, :name),
                { include_blank: '선택하세요', class: 'form-select' }
              %>
              <button type="button" class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#newAuthorModal" data-role="illustrator">
                <i class="bi bi-plus"></i>
              </button>
            </div>
          </div>
          <div class="col-md-4 narrator-field">
            <label class="form-label">성우 (구연동화만)</label>
            <div class="input-group">
              <%= select_tag 'course[narrator_id]',
                options_from_collection_for_select(@authors.narrators, :id, :name),
                { include_blank: '선택하세요', class: 'form-select' }
              %>
              <button type="button" class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#newAuthorModal" data-role="narrator">
                <i class="bi bi-plus"></i>
              </button>
            </div>
          </div>
          <div class="col-md-4">
            <%= f.label :production_date, '제작일', class: 'form-label' %>
            <%= f.date_field :production_date, class: 'form-control', value: Date.today %>
          </div>
        </div>
      </div>
    </div>

    <!-- 4️⃣ 콘텐츠 파일 업로드 -->
    <div class="card mb-4">
      <div class="card-header bg-warning">
        <h5 class="mb-0" id="file-upload-heading">4️⃣ 콘텐츠 파일 업로드</h5>
      </div>
      <div class="card-body">
        <div id="file-upload-area" class="file-upload-dropzone" role="region" aria-labelledby="file-upload-heading" aria-dropeffect="copy">
          <div class="dropzone-content">
            <i class="bi bi-cloud-upload display-1 text-muted"></i>
            <h4>여기에 파일을 드래그하세요</h4>
            <p class="text-muted">또는</p>
            <label for="file-input" class="btn btn-primary">
              📂 파일 선택
            </label>
            <input type="file" id="file-input" name="course[content_files][]" multiple style="display: none;" aria-label="콘텐츠 파일 선택" accept="image/jpeg,image/png,text/plain,video/mp4">
            
            <div class="mt-3">
              <small class="text-muted">
                <span class="ebook-hint">✓ 페이지 이미지: page_001.jpg, page_002.jpg ...</span>
                <span class="video-hint" style="display: none;">✓ 비디오: main.mp4 또는 index.m3u8</span>
              </small>
            </div>
          </div>

          <!-- 파일 목록 -->
          <div id="file-list" class="file-list mt-3" style="display: none;">
            <h6>업로드할 파일:</h6>
            <div id="file-items" class="list-group"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- 5️⃣ 썸네일 -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">5️⃣ 썸네일</h5>
      </div>
      <div class="card-body">
        <div class="row">
          <div class="col-md-6">
            <div class="form-check mb-2">
              <input class="form-check-input" type="radio" name="thumbnail_option" id="thumbnail_ai" value="ai" checked>
              <label class="form-check-label" for="thumbnail_ai">
                ✨ AI 자동 생성 (추천)
              </label>
            </div>
            <div class="form-check mb-2">
              <input class="form-check-input" type="radio" name="thumbnail_option" id="thumbnail_first" value="first">
              <label class="form-check-label" for="thumbnail_first">
                📄 첫 페이지 사용 (전자책만)
              </label>
            </div>
            <div class="form-check mb-2">
              <input class="form-check-input" type="radio" name="thumbnail_option" id="thumbnail_upload" value="upload">
              <label class="form-check-label" for="thumbnail_upload">
                📤 수동 업로드
              </label>
            </div>
            <div id="thumbnail-upload-field" style="display: none;" class="mt-2">
              <%= f.url_field :thumbnail, class: 'form-control', placeholder: '썸네일 URL 입력' %>
            </div>
          </div>
          <div class="col-md-6">
            <div id="thumbnail-preview" class="border rounded p-3 text-center">
              <p class="text-muted">미리보기</p>
              <div id="thumbnail-preview-image"></div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- 6️⃣ 발행 설정 -->
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="mb-0">6️⃣ 발행 설정</h5>
      </div>
      <div class="card-body">
        <div class="row">
          <div class="col-md-6">
            <%= f.label :status, '상태', class: 'form-label' %>
            <%= f.select :status,
              options_for_select([
                ['즉시 발행', 'published'],
                ['임시 저장', 'draft'],
                ['보관', 'archived']
              ], 'draft'),
              {},
              class: 'form-select'
            %>
          </div>
        </div>
      </div>
    </div>

    <!-- 제출 버튼 -->
    <div class="d-grid gap-2 d-md-flex justify-content-md-end mb-4">
      <%= link_to "취소", admin_courses_path, class: "btn btn-outline-secondary btn-lg" %>
      <%= f.submit "💾 저장하고 업로드", class: "btn btn-primary btn-lg", data: { disable_with: '처리 중...' } %>
    </div>
  <% end %>
</div>

<!-- 작가 추가 모달 -->
<div class="modal fade" id="newAuthorModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">신규 작가 등록</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label class="form-label">이름 *</label>
          <input type="text" class="form-control" id="new-author-name" required>
        </div>
        <div class="mb-3">
          <label class="form-label">역할</label>
          <select class="form-select" id="new-author-role">
            <option value="writer">작가</option>
            <option value="illustrator">일러스트레이터</option>
            <option value="narrator">성우</option>
          </select>
        </div>
        <div class="mb-3">
          <label class="form-label">소개</label>
          <textarea class="form-control" id="new-author-bio" rows="3"></textarea>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
        <button type="button" class="btn btn-primary" id="save-new-author">저장</button>
      </div>
    </div>
  </div>
</div>

<style>
.content-type-card {
  position: relative;
  cursor: pointer;
}

.content-type-card input[type="radio"] {
  position: absolute;
  opacity: 0;
}

.content-type-label {
  display: block;
  padding: 2rem;
  border: 2px solid #dee2e6;
  border-radius: 0.5rem;
  text-align: center;
  transition: all 0.3s;
  cursor: pointer;
}

.content-type-card input:checked + .content-type-label {
  border-color: #0d6efd;
  background-color: #e7f1ff;
}

.content-type-label .icon {
  font-size: 3rem;
  margin-bottom: 1rem;
}

.difficulty-selector {
  display: flex;
  gap: 0.5rem;
}

.difficulty-selector input[type="radio"] {
  display: none;
}

.difficulty-selector label {
  font-size: 1.5rem;
  cursor: pointer;
  opacity: 0.3;
  transition: opacity 0.2s;
}

.difficulty-selector input:checked ~ label,
.difficulty-selector input:checked + label {
  opacity: 1;
}

.difficulty-selector label:hover {
  opacity: 0.7;
}

.file-upload-dropzone {
  border: 2px dashed #dee2e6;
  border-radius: 0.5rem;
  padding: 3rem;
  text-align: center;
  transition: all 0.3s;
}

.file-upload-dropzone.dragover {
  border-color: #0d6efd;
  background-color: #e7f1ff;
}

.file-list {
  text-align: left;
}

.file-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.file-item.valid {
  border-left: 3px solid #28a745;
}

.file-item.invalid {
  border-left: 3px solid #dc3545;
}

/* ===== 모바일 반응형 개선 ===== */
@media (max-width: 768px) {
  .content-type-card {
    margin-bottom: 1rem;
  }
  
  .content-type-label {
    padding: 1.5rem 1rem;
  }
  
  .content-type-label .icon {
    font-size: 2rem;
  }
  
  .content-type-label h5 {
    font-size: 1rem;
  }
  
  .content-type-label p {
    font-size: 0.85rem;
  }
  
  .card-header h5 {
    font-size: 1rem;
  }
  
  .file-upload-dropzone {
    padding: 1.5rem;
  }
  
  .file-upload-dropzone h4 {
    font-size: 1.2rem;
  }
  
  .difficulty-selector label {
    font-size: 1.2rem;
  }
  
  /* 입력 필드 크기 조정 */
  .form-control, .form-select {
    font-size: 16px !important; /* iOS zoom 방지 */
  }
}

@media (max-width: 576px) {
  .content-type-card {
    width: 100%;
  }
  
  /* 카드 여백 축소 */
  .card {
    margin-bottom: 1rem;
  }
  
  .card-body {
    padding: 1rem;
  }
  
  /* 버튼 크기 조정 */
  .btn-lg {
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
  }
}
</style>

<script type="module">
// 파일 업로드 관리
let selectedFiles = [];

function initFileUpload() {
  const dropzone = document.getElementById('file-upload-area');
  const fileInput = document.getElementById('file-input');
  const fileList = document.getElementById('file-list');
  const fileItems = document.getElementById('file-items');

  if (!dropzone || !fileInput) return;

  // 드래그 앤 드롭 이벤트
  dropzone.addEventListener('dragover', (e) => {
    e.preventDefault();
    dropzone.classList.add('dragover');
  });

  dropzone.addEventListener('dragleave', () => {
    dropzone.classList.remove('dragover');
  });

  dropzone.addEventListener('drop', (e) => {
    e.preventDefault();
    dropzone.classList.remove('dragover');
    
    const files = Array.from(e.dataTransfer.files);
    handleFiles(files);
  });

  // 파일 선택 이벤트
  fileInput.addEventListener('change', (e) => {
    const files = Array.from(e.target.files);
    handleFiles(files);
  });

  function handleFiles(files) {
    // 파일명 자동 정규화 옵션
    const shouldNormalize = confirm('파일명을 자동으로 정규화하시겠습니까?\n(예: "페이지1.jpg" → "page_001.jpg")');
    
    if (shouldNormalize) {
      files = Array.from(files).map(file => {
        const normalized = normalizeFileName(file.name);
        if (normalized !== file.name) {
          return new File([file], normalized, { type: file.type });
        }
        return file;
      });
    }
    
    selectedFiles = [...selectedFiles, ...files];
    validateAndSortFiles();
    displayFiles();
  }
  
  function normalizeFileName(filename) {
    // "페이지1.jpg" → "page_001.jpg"
    // "이미지_1.png" → "page_001.png"
    const ext = filename.split('.').pop().toLowerCase();
    const match = filename.match(/(\d+)/);
    
    if (!match) return filename;
    
    const number = match[1].padStart(3, '0');
    return `page_${number}.${ext}`;
  }

  function validateAndSortFiles() {
    const contentType = getSelectedContentType();
    
    // 파일명으로 정렬
    selectedFiles.sort((a, b) => {
      const aMatch = a.name.match(/page_(\d+)/);
      const bMatch = b.name.match(/page_(\d+)/);
      
      if (aMatch && bMatch) {
        return parseInt(aMatch[1]) - parseInt(bMatch[1]);
      }
      return a.name.localeCompare(b.name);
    });

    // 파일 검증
    selectedFiles.forEach(file => {
      file.valid = validateFile(file, contentType);
    });
  }

  function validateFile(file, contentType) {
    const validations = {
      errors: [],
      warnings: []
    };

    const ext = file.name.split('.').pop().toLowerCase();
    
    if (contentType === 'ebook') {
      const validExts = ['jpg', 'jpeg', 'png', 'txt'];
      if (!validExts.includes(ext)) {
        validations.errors.push('지원하지 않는 형식');
      }

      if (['jpg', 'jpeg', 'png', 'txt'].includes(ext)) {
        if (!/^page_\d{3,4}\.(jpg|jpeg|png|txt)$/i.test(file.name)) {
          validations.errors.push('파일명 형식 오류 (예: page_001.jpg)');
        }
      }

      const maxSize = ext === 'txt' ? 100 * 1024 : 10 * 1024 * 1024;
      if (file.size > maxSize) {
        validations.errors.push(`파일 크기 초과 (최대 ${formatFileSize(maxSize)})`);
      }
    } else if (contentType === 'video') {
      const validExts = ['mp4', 'webm', 'm3u8', 'vtt', 'srt'];
      if (!validExts.includes(ext)) {
        validations.errors.push('지원하지 않는 형식');
      }

      const maxSize = 500 * 1024 * 1024;
      if (file.size > maxSize) {
        validations.errors.push(`파일 크기 초과 (최대 ${formatFileSize(maxSize)})`);
      }
    }

    const duplicates = selectedFiles.filter(f => f !== file && f.name === file.name);
    if (duplicates.length > 0) {
      validations.warnings.push('중복 파일명');
    }

    return {
      isValid: validations.errors.length === 0,
      errors: validations.errors,
      warnings: validations.warnings
    };
  }

  function displayFiles() {
    if (selectedFiles.length === 0) {
      fileList.style.display = 'none';
      return;
    }

    fileList.style.display = 'block';
    fileItems.innerHTML = '';

    selectedFiles.forEach((file, index) => {
      const item = document.createElement('div');
      item.className = `list-group-item file-item ${file.valid?.isValid ? 'valid' : 'invalid'}`;
      
      const validIcon = file.valid?.isValid ? '✓' : '⚠';
      const validClass = file.valid?.isValid ? 'text-success' : 'text-danger';
      
      let errorText = '';
      if (file.valid && !file.valid.isValid) {
        errorText = `<small class="text-danger d-block">${file.valid.errors.join(', ')}</small>`;
      }
      if (file.valid && file.valid.warnings.length > 0) {
        errorText += `<small class="text-warning d-block">${file.valid.warnings.join(', ')}</small>`;
      }

      item.innerHTML = `
        <div class="d-flex justify-content-between align-items-start">
          <div class="flex-grow-1">
            <span class="${validClass} me-2">${validIcon}</span>
            <strong>${file.name}</strong>
            <small class="text-muted ms-2">(${formatFileSize(file.size)})</small>
            ${errorText}
          </div>
          <button type="button" class="btn btn-sm btn-outline-danger" onclick="window.removeFile(${index})">
            🗑️
          </button>
        </div>
      `;
      
      fileItems.appendChild(item);
    });

    const summary = document.createElement('div');
    summary.className = 'mt-3 p-3 bg-light rounded';
    const validCount = selectedFiles.filter(f => f.valid?.isValid).length;
    const totalCount = selectedFiles.length;
    
    summary.innerHTML = `
      <strong>파일 요약:</strong>
      총 ${totalCount}개 파일 |
      <span class="text-success">✓ ${validCount}개 유효</span> |
      <span class="text-danger">⚠ ${totalCount - validCount}개 문제</span>
    `;
    
    fileItems.appendChild(summary);
  }

  function getSelectedContentType() {
    const selected = document.querySelector('input[name="content_type_selection"]:checked');
    return selected ? selected.value : 'ebook';
  }

  window.removeFile = function(index) {
    selectedFiles.splice(index, 1);
    displayFiles();
  };

  function formatFileSize(bytes) {
    if (bytes < 1024) return bytes + ' B';
    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
    return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
  }
}

// ===== 전역 상태 관리 =====
let isDirty = false;
let isSubmitting = false;
let autosaveInterval = null;

document.addEventListener('DOMContentLoaded', function() {
  // 콘텐츠 타입 변경 시
  document.querySelectorAll('input[name="content_type_selection"]').forEach(radio => {
    radio.addEventListener('change', function() {
      const isVideo = this.value === 'video';
      const narratorField = document.querySelector('.narrator-field');
      if (narratorField) narratorField.style.display = isVideo ? 'block' : 'none';
      
      const ebookHint = document.querySelector('.ebook-hint');
      if (ebookHint) ebookHint.style.display = isVideo ? 'none' : 'inline';
      
      const videoHint = document.querySelector('.video-hint');
      if (videoHint) videoHint.style.display = isVideo ? 'inline' : 'none';
      
      isDirty = true;
    });
  });

  // 썸네일 옵션 변경
  document.querySelectorAll('input[name="thumbnail_option"]').forEach(radio => {
    radio.addEventListener('change', function() {
      const uploadField = document.getElementById('thumbnail-upload-field');
      if (uploadField) uploadField.style.display = this.value === 'upload' ? 'block' : 'none';
      isDirty = true;
    });
  });

  // 난이도 별 표시
  const difficultyInputs = document.querySelectorAll('.difficulty-selector input[type="radio"]');
  difficultyInputs.forEach(input => {
    input.addEventListener('change', function() {
      const level = parseInt(this.value);
      const labels = document.querySelectorAll('.difficulty-selector label');
      
      labels.forEach((label, index) => {
        if (index < level) {
          label.style.opacity = '1';
        } else {
          label.style.opacity = '0.3';
        }
      });
      isDirty = true;
    });
  });

  // ===== 1. 중복 제출 방지 =====
  const form = document.querySelector('.content-upload-form');
  if (form) {
    form.addEventListener('submit', function(e) {
      if (isSubmitting) {
        e.preventDefault();
        showToast('이미 처리 중입니다', 'warning');
        return false;
      }
      
      if (!validateFormBeforeSubmit()) {
        e.preventDefault();
        return false;
      }
      
      isSubmitting = true;
      isDirty = false; // 제출 시에는 데이터 손실 경고 안 함
      
      const submitBtn = form.querySelector('button[type="submit"]');
      if (submitBtn) {
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>처리 중...';
      }
    });
  }

  // ===== 2. 데이터 손실 방지 =====
  document.querySelectorAll('input, textarea, select').forEach(el => {
    el.addEventListener('change', () => {
      isDirty = true;
      saveToLocalStorage();
    });
  });

  window.addEventListener('beforeunload', (e) => {
    if (isDirty && !isSubmitting) {
      e.preventDefault();
      e.returnValue = '작성 중인 내용이 저장되지 않았습니다. 정말 나가시겠습니까?';
      return e.returnValue;
    }
  });

  // ===== 3. 임시저장 기능 (localStorage) =====
  function saveToLocalStorage() {
    const formData = {
      title: document.querySelector('[name="course[title]"]')?.value,
      subtitle: document.querySelector('[name="course[subtitle]"]')?.value,
      category: document.querySelector('[name="course[category]"]')?.value,
      age: document.querySelector('[name="course[age]"]')?.value,
      price: document.querySelector('[name="course[price]"]')?.value,
      description: document.querySelector('[name="course[description]"]')?.value,
      tags: document.querySelector('[name="course[tags]"]')?.value,
      series_name: document.querySelector('[name="course[series_name]"]')?.value,
      timestamp: new Date().toISOString()
    };
    
    localStorage.setItem('admin_course_draft', JSON.stringify(formData));
  }

  function loadFromLocalStorage() {
    const saved = localStorage.getItem('admin_course_draft');
    if (!saved) return;
    
    const confirmRestore = confirm('저장된 임시 작성 내용이 있습니다. 불러오시겠습니까?');
    if (!confirmRestore) {
      localStorage.removeItem('admin_course_draft');
      return;
    }
    
    try {
      const data = JSON.parse(saved);
      
      Object.keys(data).forEach(key => {
        if (key === 'timestamp') return;
        const input = document.querySelector(`[name="course[${key}]"]`);
        if (input && data[key]) {
          input.value = data[key];
        }
      });
      
      showToast('임시 저장된 내용을 불러왔습니다', 'success');
    } catch (e) {
      console.error('임시저장 데이터 로드 실패:', e);
    }
  }

  // 페이지 로드 시 임시저장 확인
  setTimeout(loadFromLocalStorage, 500);

  // ===== 4. 가격 포맷팅 =====
  const priceInput = document.querySelector('[name="course[price]"]');
  if (priceInput) {
    priceInput.addEventListener('blur', function() {
      const value = parseInt(this.value.replace(/,/g, ''));
      if (!isNaN(value)) {
        this.value = value;
        const formatted = value.toLocaleString('ko-KR');
        const helpText = this.nextElementSibling;
        if (!helpText || !helpText.classList.contains('price-formatted')) {
          const span = document.createElement('small');
          span.className = 'form-text text-muted price-formatted';
          span.textContent = `→ ${formatted}원`;
          this.parentElement.appendChild(span);
        } else {
          helpText.textContent = `→ ${formatted}원`;
        }
      }
    });
  }

  // ===== 5. 태그 입력 개선 =====
  const tagsInput = document.querySelector('[name="course[tags]"]');
  if (tagsInput) {
    tagsInput.addEventListener('keydown', function(e) {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        const value = this.value.trim();
        if (value && !value.endsWith(',')) {
          this.value = value + ', ';
        }
      }
    });
    
    tagsInput.addEventListener('blur', function() {
      // 자동으로 # 추가
      const tags = this.value.split(',').map(tag => {
        tag = tag.trim();
        if (tag && !tag.startsWith('#')) {
          return '#' + tag;
        }
        return tag;
      }).filter(Boolean).join(', ');
      this.value = tags;
    });
  }

  // ===== 6. 작가 선택 기억 =====
  function rememberLastAuthors() {
    const writerSelect = document.querySelector('[name="course[writer_id]"]');
    const illustratorSelect = document.querySelector('[name="course[illustrator_id]"]');
    const narratorSelect = document.querySelector('[name="course[narrator_id]"]');
    
    [writerSelect, illustratorSelect, narratorSelect].forEach(select => {
      if (select) {
        select.addEventListener('change', function() {
          const key = this.name.replace('course[', '').replace(']', '');
          localStorage.setItem(`last_${key}`, this.value);
        });
        
        // 이전 선택 불러오기
        const key = select.name.replace('course[', '').replace(']', '');
        const lastValue = localStorage.getItem(`last_${key}`);
        if (lastValue) {
          select.value = lastValue;
        }
      }
    });
  }
  
  rememberLastAuthors();


  // ===== 8. Toast 알림 시스템 =====
  window.showToast = function(message, type = 'info') {
    const toastContainer = document.getElementById('toast-container') || createToastContainer();
    
    const toast = document.createElement('div');
    toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : type === 'error' ? 'danger' : type === 'warning' ? 'warning' : 'info'} border-0`;
    toast.setAttribute('role', 'alert');
    toast.innerHTML = `
      <div class="d-flex">
        <div class="toast-body">${message}</div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
      </div>
    `;
    
    toastContainer.appendChild(toast);
    const bsToast = new bootstrap.Toast(toast);
    bsToast.show();
    
    setTimeout(() => toast.remove(), 5000);
  };

  function createToastContainer() {
    const container = document.createElement('div');
    container.id = 'toast-container';
    container.className = 'toast-container position-fixed top-0 end-0 p-3';
    container.style.zIndex = '9999';
    document.body.appendChild(container);
    return container;
  }

  // ===== 9. 폼 검증 =====
  function validateFormBeforeSubmit() {
    const errors = [];
    
    const title = document.querySelector('[name="course[title]"]');
    if (!title?.value || title.value.length < 5) {
      errors.push('제목은 5자 이상 입력해주세요');
    }
    
    const category = document.querySelector('[name="course[category]"]');
    if (!category?.value || category.value === '선택하세요') {
      errors.push('카테고리를 선택해주세요');
    }
    
    const age = document.querySelector('[name="course[age]"]');
    if (!age?.value || age.value === '선택하세요') {
      errors.push('연령을 선택해주세요');
    }
    
    const price = document.querySelector('[name="course[price]"]');
    if (!price?.value || parseInt(price.value) < 0) {
      errors.push('가격을 입력해주세요');
    }
    
    const description = document.querySelector('[name="course[description]"]');
    if (!description?.value || description.value.length < 20) {
      errors.push('설명은 20자 이상 입력해주세요');
    }
    
    if (errors.length > 0) {
      showToast(errors.join('<br>'), 'error');
      return false;
    }
    
    return true;
  }

  // 파일 업로드 초기화
  initFileUpload();

  // 신규 작가 등록 (모달)
  const saveAuthorBtn = document.getElementById('save-new-author');
  if (saveAuthorBtn) {
    saveAuthorBtn.addEventListener('click', async function() {
      const name = document.getElementById('new-author-name').value;
      const role = document.getElementById('new-author-role').value;
      const bio = document.getElementById('new-author-bio').value;

      if (!name) {
        showToast('이름을 입력하세요', 'warning');
        return;
      }

      try {
        const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content;
        const response = await fetch('/admin/authors', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'X-CSRF-Token': csrfToken
          },
          body: JSON.stringify({
            author: { name, role, bio, active: true }
          })
        });

        if (response.ok) {
          const data = await response.json();
          
          // 해당 역할의 select에 추가
          const select = document.querySelector(`select[name="course[${role}_id]"]`);
          if (select) {
            const option = new Option(data.name, data.id, true, true);
            select.add(option);
          }

          // 모달 닫기
          const modalElement = document.getElementById('newAuthorModal');
          const modal = bootstrap.Modal.getInstance(modalElement);
          if (modal) modal.hide();

          // 폼 초기화
          document.getElementById('new-author-name').value = '';
          document.getElementById('new-author-bio').value = '';
          
          showToast('작가가 등록되었습니다', 'success');
        } else {
          showToast('작가 등록에 실패했습니다', 'error');
        }
      } catch (error) {
        console.error('Error:', error);
        showToast('오류가 발생했습니다', 'error');
      }
    });
  }
});
</script>
